'------------------------------------------------------------------------------
' <auto-generated>
'     Dieser Code wurde von einem Tool generiert.
'     Laufzeitversion:2.0.50727.1433
'
'     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
'     der Code erneut generiert wird.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On
Option Infer On


Namespace Data

    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     Global.System.Serializable(), _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
     Global.System.Xml.Serialization.XmlRootAttribute("IndexDataSet"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
    Partial Public Class IndexDataSet
        Inherits Global.System.Data.DataSet

        Private tablefolder As folderDataTable

        Private tablefile As fileDataTable

        Private relationpath As Global.System.Data.DataRelation

        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.BeginInit()
            Me.InitClass()
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, False)
            If (Me.IsBinarySerialized(info, context) = True) Then
                Me.InitVars(False)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("folder")) Is Nothing) Then
                    MyBase.Tables.Add(New folderDataTable(ds.Tables("folder")))
                End If
                If (Not (ds.Tables("file")) Is Nothing) Then
                    MyBase.Tables.Add(New fileDataTable(ds.Tables("file")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False), _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
        Public ReadOnly Property folder() As folderDataTable
            Get
                Return Me.tablefolder
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.Browsable(False), _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
        Public ReadOnly Property file() As fileDataTable
            Get
                Return Me.tablefile
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.BrowsableAttribute(True), _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set(ByVal value As Global.System.Data.SchemaSerializationMode)
                Me._schemaSerializationMode = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As IndexDataSet = CType(MyBase.Clone, IndexDataSet)
            cln.InitVars()
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset()
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("folder")) Is Nothing) Then
                    MyBase.Tables.Add(New folderDataTable(ds.Tables("folder")))
                End If
                If (Not (ds.Tables("file")) Is Nothing) Then
                    MyBase.Tables.Add(New fileDataTable(ds.Tables("file")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.ReadXml(reader)
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Overloads Sub InitVars()
            Me.InitVars(True)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tablefolder = CType(MyBase.Tables("folder"), folderDataTable)
            If (initTable = True) Then
                If (Not (Me.tablefolder) Is Nothing) Then
                    Me.tablefolder.InitVars()
                End If
            End If
            Me.tablefile = CType(MyBase.Tables("file"), fileDataTable)
            If (initTable = True) Then
                If (Not (Me.tablefile) Is Nothing) Then
                    Me.tablefile.InitVars()
                End If
            End If
            Me.relationpath = Me.Relations("path")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.DataSetName = "IndexDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/IndexDataSet.xsd"
            Me.EnforceConstraints = True
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tablefolder = New folderDataTable
            MyBase.Tables.Add(Me.tablefolder)
            Me.tablefile = New fileDataTable
            MyBase.Tables.Add(Me.tablefile)
            Me.relationpath = New Global.System.Data.DataRelation("path", New Global.System.Data.DataColumn() {Me.tablefolder.pathColumn}, New Global.System.Data.DataColumn() {Me.tablefile.pathColumn}, False)
            Me.Relations.Add(Me.relationpath)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Function ShouldSerializefolder() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Function ShouldSerializefile() As Boolean
            Return False
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars()
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As IndexDataSet = New IndexDataSet
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function

        Public Delegate Sub folderRowChangeEventHandler(ByVal sender As Object, ByVal e As folderRowChangeEvent)

        Public Delegate Sub fileRowChangeEventHandler(ByVal sender As Object, ByVal e As fileRowChangeEvent)

        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
         Global.System.Serializable(), _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
        Partial Public Class folderDataTable
            Inherits Global.System.Data.TypedTableBase(Of folderRow)

            Private columnpath As Global.System.Data.DataColumn

            Private columnlast_write_time As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New()
                MyBase.New()
                Me.TableName = "folder"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New()
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property pathColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnpath
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property last_write_timeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnlast_write_time
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Default Public ReadOnly Property Item(ByVal index As Integer) As folderRow
                Get
                    Return CType(Me.Rows(index), folderRow)
                End Get
            End Property

            Public Event folderRowChanging As folderRowChangeEventHandler

            Public Event folderRowChanged As folderRowChangeEventHandler

            Public Event folderRowDeleting As folderRowChangeEventHandler

            Public Event folderRowDeleted As folderRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overloads Sub AddfolderRow(ByVal row As folderRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overloads Function AddfolderRow(ByVal path As String, ByVal last_write_time As String) As folderRow
                Dim rowfolderRow As folderRow = CType(Me.NewRow, folderRow)
                Dim columnValuesArray() As Object = New Object() {path, last_write_time}
                rowfolderRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowfolderRow)
                Return rowfolderRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function FindBypath(ByVal path As String) As folderRow
                Return CType(Me.Rows.Find(New Object() {path}), folderRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As folderDataTable = CType(MyBase.Clone, folderDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New folderDataTable
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub InitVars()
                Me.columnpath = MyBase.Columns("path")
                Me.columnlast_write_time = MyBase.Columns("last_write_time")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Private Sub InitClass()
                Me.columnpath = New Global.System.Data.DataColumn("path", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnpath)
                Me.columnlast_write_time = New Global.System.Data.DataColumn("last_write_time", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnlast_write_time)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("path", New Global.System.Data.DataColumn() {Me.columnpath}, True))
                Me.columnpath.AllowDBNull = False
                Me.columnpath.Unique = True
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function NewfolderRow() As folderRow
                Return CType(Me.NewRow, folderRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New folderRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(folderRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.folderRowChangedEvent) Is Nothing) Then
                    RaiseEvent folderRowChanged(Me, New folderRowChangeEvent(CType(e.Row, folderRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.folderRowChangingEvent) Is Nothing) Then
                    RaiseEvent folderRowChanging(Me, New folderRowChangeEvent(CType(e.Row, folderRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.folderRowDeletedEvent) Is Nothing) Then
                    RaiseEvent folderRowDeleted(Me, New folderRowChangeEvent(CType(e.Row, folderRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.folderRowDeletingEvent) Is Nothing) Then
                    RaiseEvent folderRowDeleting(Me, New folderRowChangeEvent(CType(e.Row, folderRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub RemovefolderRow(ByVal row As folderRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As IndexDataSet = New IndexDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "folderDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0

                                Do While ((s1.Position <> s1.Length) _
                                            AndAlso (s1.ReadByte = s2.ReadByte))


                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If

                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close()
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
         Global.System.Serializable(), _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
        Partial Public Class fileDataTable
            Inherits Global.System.Data.TypedTableBase(Of fileRow)

            Private columnpath As Global.System.Data.DataColumn

            Private columnname As Global.System.Data.DataColumn

            Private columnartist As Global.System.Data.DataColumn

            Private columnalbum As Global.System.Data.DataColumn

            Private columntitle As Global.System.Data.DataColumn

            Private columntrack As Global.System.Data.DataColumn

            Private columnyear As Global.System.Data.DataColumn

            Private columncomment As Global.System.Data.DataColumn

            Private columngenre As Global.System.Data.DataColumn

            Private columnsize As Global.System.Data.DataColumn

            Private columnduration As Global.System.Data.DataColumn

            Private columnbitrate As Global.System.Data.DataColumn

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New()
                MyBase.New()
                Me.TableName = "file"
                Me.BeginInit()
                Me.InitClass()
                Me.EndInit()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New()
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars()
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property pathColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnpath
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnname
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property artistColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnartist
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property albumColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnalbum
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property titleColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columntitle
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property trackColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columntrack
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property yearColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnyear
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property commentColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columncomment
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property genreColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columngenre
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property sizeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnsize
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property durationColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnduration
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property bitrateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnbitrate
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Default Public ReadOnly Property Item(ByVal index As Integer) As fileRow
                Get
                    Return CType(Me.Rows(index), fileRow)
                End Get
            End Property

            Public Event fileRowChanging As fileRowChangeEventHandler

            Public Event fileRowChanged As fileRowChangeEventHandler

            Public Event fileRowDeleting As fileRowChangeEventHandler

            Public Event fileRowDeleted As fileRowChangeEventHandler

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overloads Sub AddfileRow(ByVal row As fileRow)
                Me.Rows.Add(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overloads Function AddfileRow(ByVal parentfolderRowBypath As folderRow, ByVal name As String, ByVal artist As String, ByVal album As String, ByVal title As String, ByVal track As String, ByVal year As String, ByVal comment As String, ByVal genre As String, ByVal size As String, ByVal duration As String, ByVal bitrate As String) As fileRow
                Dim rowfileRow As fileRow = CType(Me.NewRow, fileRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, name, artist, album, title, track, year, comment, genre, size, duration, bitrate}
                If (Not (parentfolderRowBypath) Is Nothing) Then
                    columnValuesArray(0) = parentfolderRowBypath(0)
                End If
                rowfileRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowfileRow)
                Return rowfileRow
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As fileDataTable = CType(MyBase.Clone, fileDataTable)
                cln.InitVars()
                Return cln
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New fileDataTable
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub InitVars()
                Me.columnpath = MyBase.Columns("path")
                Me.columnname = MyBase.Columns("name")
                Me.columnartist = MyBase.Columns("artist")
                Me.columnalbum = MyBase.Columns("album")
                Me.columntitle = MyBase.Columns("title")
                Me.columntrack = MyBase.Columns("track")
                Me.columnyear = MyBase.Columns("year")
                Me.columncomment = MyBase.Columns("comment")
                Me.columngenre = MyBase.Columns("genre")
                Me.columnsize = MyBase.Columns("size")
                Me.columnduration = MyBase.Columns("duration")
                Me.columnbitrate = MyBase.Columns("bitrate")
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Private Sub InitClass()
                Me.columnpath = New Global.System.Data.DataColumn("path", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnpath)
                Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnname)
                Me.columnartist = New Global.System.Data.DataColumn("artist", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnartist)
                Me.columnalbum = New Global.System.Data.DataColumn("album", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnalbum)
                Me.columntitle = New Global.System.Data.DataColumn("title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columntitle)
                Me.columntrack = New Global.System.Data.DataColumn("track", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columntrack)
                Me.columnyear = New Global.System.Data.DataColumn("year", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnyear)
                Me.columncomment = New Global.System.Data.DataColumn("comment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columncomment)
                Me.columngenre = New Global.System.Data.DataColumn("genre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columngenre)
                Me.columnsize = New Global.System.Data.DataColumn("size", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnsize)
                Me.columnduration = New Global.System.Data.DataColumn("duration", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnduration)
                Me.columnbitrate = New Global.System.Data.DataColumn("bitrate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnbitrate)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function NewfileRow() As fileRow
                Return CType(Me.NewRow, fileRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New fileRow(builder)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(fileRow)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.fileRowChangedEvent) Is Nothing) Then
                    RaiseEvent fileRowChanged(Me, New fileRowChangeEvent(CType(e.Row, fileRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.fileRowChangingEvent) Is Nothing) Then
                    RaiseEvent fileRowChanging(Me, New fileRowChangeEvent(CType(e.Row, fileRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.fileRowDeletedEvent) Is Nothing) Then
                    RaiseEvent fileRowDeleted(Me, New fileRowChangeEvent(CType(e.Row, fileRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.fileRowDeletingEvent) Is Nothing) Then
                    RaiseEvent fileRowDeleting(Me, New fileRowChangeEvent(CType(e.Row, fileRow), e.Action))
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub RemovefileRow(ByVal row As fileRow)
                Me.Rows.Remove(row)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As IndexDataSet = New IndexDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "fileDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0

                                Do While ((s1.Position <> s1.Length) _
                                            AndAlso (s1.ReadByte = s2.ReadByte))


                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If

                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close()
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close()
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class

        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
        Partial Public Class folderRow
            Inherits Global.System.Data.DataRow

            Private tablefolder As folderDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tablefolder = CType(Me.Table, folderDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property path() As String
                Get
                    Return CType(Me(Me.tablefolder.pathColumn), String)
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefolder.pathColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property last_write_time() As String
                Get
                    Try
                        Return CType(Me(Me.tablefolder.last_write_timeColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte last_write_time in Tabelle folder ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefolder.last_write_timeColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function Islast_write_timeNull() As Boolean
                Return Me.IsNull(Me.tablefolder.last_write_timeColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub Setlast_write_timeNull()
                Me(Me.tablefolder.last_write_timeColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function GetfileRows() As fileRow()
                If (Me.Table.ChildRelations("path") Is Nothing) Then
                    Return New fileRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("path")), fileRow())
                End If
            End Function
        End Class

        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
        Partial Public Class fileRow
            Inherits Global.System.Data.DataRow

            Private tablefile As fileDataTable

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tablefile = CType(Me.Table, fileDataTable)
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property path() As String
                Get
                    Try
                        Return CType(Me(Me.tablefile.pathColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte path in Tabelle file ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefile.pathColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property name() As String
                Get
                    Try
                        Return CType(Me(Me.tablefile.nameColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte name in Tabelle file ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefile.nameColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property artist() As String
                Get
                    Try
                        Return CType(Me(Me.tablefile.artistColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte artist in Tabelle file ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefile.artistColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property album() As String
                Get
                    Try
                        Return CType(Me(Me.tablefile.albumColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte album in Tabelle file ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefile.albumColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property title() As String
                Get
                    Try
                        Return CType(Me(Me.tablefile.titleColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte title in Tabelle file ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefile.titleColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property track() As String
                Get
                    Try
                        Return CType(Me(Me.tablefile.trackColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte track in Tabelle file ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefile.trackColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property year() As String
                Get
                    Try
                        Return CType(Me(Me.tablefile.yearColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte year in Tabelle file ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefile.yearColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property comment() As String
                Get
                    Try
                        Return CType(Me(Me.tablefile.commentColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte comment in Tabelle file ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefile.commentColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property genre() As String
                Get
                    Try
                        Return CType(Me(Me.tablefile.genreColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte genre in Tabelle file ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefile.genreColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property size() As String
                Get
                    Try
                        Return CType(Me(Me.tablefile.sizeColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte size in Tabelle file ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefile.sizeColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property duration() As String
                Get
                    Try
                        Return CType(Me(Me.tablefile.durationColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte duration in Tabelle file ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefile.durationColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property bitrate() As String
                Get
                    Try
                        Return CType(Me(Me.tablefile.bitrateColumn), String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("Der Wert für Spalte bitrate in Tabelle file ist DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablefile.bitrateColumn) = Value
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Property folderRow() As folderRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("path")), folderRow)
                End Get
                Set(ByVal value As folderRow)
                    Me.SetParentRow(Value, Me.Table.ParentRelations("path"))
                End Set
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IspathNull() As Boolean
                Return Me.IsNull(Me.tablefile.pathColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetpathNull()
                Me(Me.tablefile.pathColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsnameNull() As Boolean
                Return Me.IsNull(Me.tablefile.nameColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetnameNull()
                Me(Me.tablefile.nameColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsartistNull() As Boolean
                Return Me.IsNull(Me.tablefile.artistColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetartistNull()
                Me(Me.tablefile.artistColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsalbumNull() As Boolean
                Return Me.IsNull(Me.tablefile.albumColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetalbumNull()
                Me(Me.tablefile.albumColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IstitleNull() As Boolean
                Return Me.IsNull(Me.tablefile.titleColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SettitleNull()
                Me(Me.tablefile.titleColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IstrackNull() As Boolean
                Return Me.IsNull(Me.tablefile.trackColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SettrackNull()
                Me(Me.tablefile.trackColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsyearNull() As Boolean
                Return Me.IsNull(Me.tablefile.yearColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetyearNull()
                Me(Me.tablefile.yearColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IscommentNull() As Boolean
                Return Me.IsNull(Me.tablefile.commentColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetcommentNull()
                Me(Me.tablefile.commentColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsgenreNull() As Boolean
                Return Me.IsNull(Me.tablefile.genreColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetgenreNull()
                Me(Me.tablefile.genreColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IssizeNull() As Boolean
                Return Me.IsNull(Me.tablefile.sizeColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetsizeNull()
                Me(Me.tablefile.sizeColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsdurationNull() As Boolean
                Return Me.IsNull(Me.tablefile.durationColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetdurationNull()
                Me(Me.tablefile.durationColumn) = Global.System.Convert.DBNull
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Function IsbitrateNull() As Boolean
                Return Me.IsNull(Me.tablefile.bitrateColumn)
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub SetbitrateNull()
                Me(Me.tablefile.bitrateColumn) = Global.System.Convert.DBNull
            End Sub
        End Class

        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
        Public Class folderRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As folderRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New(ByVal row As folderRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New()
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Row() As folderRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class

        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
        Public Class fileRowChangeEvent
            Inherits Global.System.EventArgs

            Private eventRow As fileRow

            Private eventAction As Global.System.Data.DataRowAction

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public Sub New(ByVal row As fileRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New()
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Row() As fileRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()> _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
